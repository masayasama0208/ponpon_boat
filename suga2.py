"""
pipe_poppop.py
==============

★ “パイプ兼ボイラー型” ポンポン船 4 変数モデルの最小実行例 ★
────────────────────────────────────────
y = [m_v, v, x, U]
   m_v : 蒸気質量 [kg]
   v   : パイプ内水柱速度 (+ 排出, − 吸い込み) [m s⁻¹]
   x   : 水柱変位 (+ 外へ, − 内へ)             [m]
   U   : 船体速度  (+ 前進)                    [m s⁻¹]

• 独立したボイラー室はなく、加熱区間長 L_h がそのまま蒸気室
• 4 変数で押し出し⇄吸い込み振動と推進を同時に再現
• 未決パラメータ (★印) を実験値に差し替えて利用
"""

import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

# ------------------------------------------------------------------
# 1) 実験パラメータ（★は測定値に置き換えてください）
# ------------------------------------------------------------------
P = dict(
    # ── パイプ & ジオメトリ ──────────────────────────
    D       = 0.0020,             # ★内径 [m]  (例 φ2 mm)
    Lh      = 0.025,              # ★加熱区間長 [m] (炎が当たる軸長)
    L_tot   = 0.050,              # パイプ全長  [m]
    nozzleA = 0.8e-6,             # 流出口面積 [m²] (例 φ1 mm)

    # ── 船体 ────────────────────────────────────
    M       = 0.20,               # ★船体質量 [kg]
    Aw      = 4.0e-4,             # ★水線面積 [m²]
    CD_ship = 0.01,               # 抵抗係数（要調整）

    # ── 熱入力 & 蒸発 ───────────────────────────
    Qdot    = 0.60,               # ★火力 [W] (ロウソク芯１本≃0.6 W)
    eta_ev  = 0.30,               # 熱→蒸発効率 (0〜1)

    # ── 物性定数 ───────────────────────────────
    Lv      = 2.26e6,             # 蒸発潜熱 [J kg⁻¹]
    Rv      = 461.5,              # 水蒸気気体定数 [J kg⁻¹ K⁻¹]
    Tw      = 373.15,             # 蒸気温度 ≒ 100 °C [K]
    P0      = 101325.0,           # 大気圧 [Pa]
    rho_l   = 1000.0,             # 水密度 [kg m⁻³]

    # ── 流出・摩擦係数（おおまかな初期値）────────
    Cd_noz  = 0.8,                # ノズル流出係数
    Cf      = 1.0e-3,             # パイプ内摩擦係数
)

# 派生定数
P["At"] = np.pi*(P["D"]/2)**2       # パイプ断面 [m²]
P["mw"] = P["rho_l"]*P["At"]*P["L_tot"]   # 水柱質量 [kg]
V_MIN   = 1e-12                      # 体積ゼロガード

# ------------------------------------------------------------------
# 2) 右辺関数
# ------------------------------------------------------------------
def rhs(t, y, p):
    mv, v, x, U = y

    # 2-1 容積とボイラー圧
    V = p["At"] * (p["Lh"] - x)               # 動的容積
    if V < V_MIN:                             # ガード
        V = V_MIN
    P_bo = mv * p["Rv"] * p["Tw"] / V         # 理想気体
    rho_v = P_bo / (p["Rv"] * p["Tw"])        # 蒸気密度

    # 2-2 質量収支
    dm_evap = p["eta_ev"] * p["Qdot"] / p["Lv"]
    dP      = P_bo - p["P0"]
    dm_noz  = p["Cd_noz"] * p["nozzleA"] * np.sign(dP) * np.sqrt(2*abs(dP)*rho_v)
    dmv_dt  = dm_evap - dm_noz

    # 2-3 水柱運動
    F_p   = p["At"] * dP
    F_f   = p["Cf"] * v * abs(v)
    dv_dt = (F_p - F_f) / p["mw"]

    # 2-4 船体運動
    v_jet = np.sign(dP)*np.sqrt(2*abs(dP)/max(rho_v,1e-9))
    thrust = dm_noz * v_jet
    drag   = 0.5 * p["rho_l"] * p["CD_ship"] * p["Aw"] * U*abs(U)
    dU_dt  = (thrust - drag) / p["M"]

    return [dmv_dt := dmv_dt, dv_dt, v, dU_dt]   # ẋ = v

# ------------------------------------------------------------------
# 3) 初期条件
# ------------------------------------------------------------------
mv0 = P["P0"]*P["At"]*P["Lh"] / (P["Rv"]*P["Tw"])  # 大気圧静止
y0  = [mv0, 0.0, 0.0, 0.0]

# ------------------------------------------------------------------
# 4) 数値積分
# ------------------------------------------------------------------
t_end = 10.0
sol = solve_ivp(rhs, (0.0, t_end), y0, args=(P,),
                method="RK45", rtol=1e-6, atol=1e-9, max_step=1e-3)

t, mv, v, x, U = sol.t, *sol.y
P_bo = mv * P["Rv"] * P["Tw"] / (P["At"]*(P["Lh"] - x))

# ------------------------------------------------------------------
# 5) 可視化
# ------------------------------------------------------------------
fig, ax = plt.subplots(4, 1, sharex=True, figsize=(7, 8))
ax[0].plot(t, P_bo/1e5);        ax[0].set_ylabel('Pressure [bar]')
ax[1].plot(t, v*1e2);           ax[1].set_ylabel('Water v [cm/s]')
ax[2].plot(t, U*1e2);           ax[2].set_ylabel('Ship U [cm/s]')
ax[3].plot(t, x*1e3);           ax[3].set_ylabel('x [mm]')
ax[3].set_xlabel('time [s]')
fig.tight_layout(); plt.show()
